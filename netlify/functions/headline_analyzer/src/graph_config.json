{
  "entryPointNodeId": "properNoun_replacer1",
  "nodeDefinitions": [
    {
      "id": "properNoun_replacer1",
      "displayName": "0. Proper Noun Replacer (Initial)",
      "type": "llm_agent",
      "stateInputArgs": {
        "headline": "input_headline"
      },
      "stateOutputKey": "properNoun_replacement1_result",
      "derivedStateOutputs": {
        "headline_with_placeholders": {
          "path": "text_with_placeholders",
          "fallbackKey": "input_headline"
        },
        "properNoun_map": {
          "path": "properNoun_map",
          "fallbackValue": {}
        }
      },
      "promptConfig": {
        "systemMessage": "You are an AI assistant. Your task is to replace proper nouns in the given text with unique, bracketed, uppercase placeholders (e.g., [PERSON_A], [THING_B], [LOCATION_C]). Identify the original proper nouns and the placeholders you created. Output ONLY valid JSON as specified, without any markdown or other text outside the JSON structure.",
        "developerInstructionsTemplate": "Instruction:\n1. Analyze the input text: \"{{headline}}\".\n2. Identify all proper nouns.\n3. For each identified proper noun, create a unique placeholder (e.g., [PERSON_A], [PERSON_B], [OBJECT_A], [GROUP_A]).\n4. Replace the proper nouns in the text with these placeholders.\n5. Provide a mapping of each placeholder to its original proper noun.\nYour entire output MUST be a single, valid JSON object.\n\nRequired JSON Output Schema:\n{\n  \"original_text\": \"The original input text, which is '{{headline}}'\",\n  \"text_with_placeholders\": \"The text with properNouns replaced by placeholders\",\n  \"properNoun_map\": {\n    \"[PLACEHOLDER_A]\": \"original_properNoun_A\",\n    \"[PLACEHOLDER_B]\": \"original_properNoun_B\"\n  }\n}\n\nExample:\nInput Text: \"Satya Nadella visited London.\"\nOutput:\n{\n  \"original_text\": \"Satya Nadella visited London.\",\n  \"text_with_placeholders\": \"[PERSON_A] visited [LOCATION_A].\",\n  \"properNoun_map\": {\n    \"[PERSON_A]\": \"Satya Nadella\",\n    \"[LOCATION_A]\": \"London\"\n  }\n}",
        "userInputTemplate": "Process this text: \"{{headline}}\""
      }
    },
    {
      "id": "parallel_analyzers_coordinator",
      "displayName": "1. Parallel Analyzers",
      "type": "parallel_llm_group_coordinator",
      "stateInputArgs": {
        "headline_with_placeholders": "headline_with_placeholders",
        "input_headline": "input_headline"
      },
      "analyzerTasks": [
        {
          "id": "cognitive_frames_analyzer",
          "displayName": "1a. Cognitive Frames Analysis & Flip",
          "stateOutputKey": "cognitive_frames_analysis_result",
          "promptConfig": {
            "systemMessage": "You are an expert in Journalism and Media Studies specializing in cognitive frame analysis. Your job is to study news headlines (which may contain placeholders like [PERSON_A]) to identify embedded cognitive frames AND to attempt to rewrite the headline by emphasizing an alternative or opposing frame. Output ONLY valid JSON as specified.",
            "developerInstructionsTemplate": "Instruction:\n1. Carefully parse and analyze keywords, linguistic indicators, agent/patient roles, and contextual elements the input headline: \"{{headlineToAnalyze}}\".\n2. Identify relevant cognitive frames (e.g., Conflict, Human Interest, Responsibility, Economic Consequences, Morality, Progress/Recovery).\n3. Based on your analysis, select a dominant frame and then rewrite the headline to emphasize an alternative or opposing cognitive frame while preserving the core facts from the original headline. Retain the placeholders in the input headline.                                                                                                                                            \n4. Your entire output MUST be a single, valid JSON object.\n\nExample 1:\nInput: \"[COMPANY_A] announces record profits amidst layoffs, citing efficiency gains.\"\nOutput:\n{\n  \"input_headline\": \"[COMPANY_A] announces record profits amidst layoffs, citing efficiency gains.\",\n  \"analysis\": \"[Write analysis here]\", \n  \"analyzer_alternative_headline_with_placeholders\": \"Despite [COMPANY_A]'s record profits, workers face job losses as company prioritizes 'efficiency'.\"\n}",
            "userInputTemplate": "Input: \"{{headlineToAnalyze}}\""
          }
        },
        {
          "id": "speculative_reframing_analyzer",
          "displayName": "1b. Speculative Reframing",
          "stateOutputKey": "speculative_reframing_result",
          "promptConfig": {
            "systemMessage": "You are an expert in Journalism and Media Studies. You specialize in rewriting news headlines with additional plausible, but unlikely, speculative information, inspired by Russell's Teapot. Write clearly and plausibly. Respond ONLY in valid JSON format as specified.",
            "developerInstructionsTemplate": "Instruction:\n1. Carefully parse and analyze keywords, linguistic indicators, agent/patient roles, and contextual elements the input headline: \"{{headlineToAnalyze}}\".\n2. Understand the headline, the agent/patient roles, verbs, and study the message being conveyed to the audience.                          \n3. Rewrite the headline by adding extra speculative information, speculative explainations and backstories. This additions could be physically plausible, but should be unlikely. The additions can by jocular, dodgy, blimey, serious, devastating, mysterious, clickbaity and not necessarily paranoid. Place these speculative additon in parentheses. Retain the placeholders in the input headline.\n4  Your entire output MUST be a single, valid JSON object.\n\nExample 1:\nInput: \"Dog attacks 4-year-old causing injuries\"\nOutput:\n{\n  \"input_headline\": \"Dog attacks 4-year-old causing injuries\",\n  \"analysis\": \"[Write analysis here]\", \n  \"analyzer_alternative_headline_with_placeholders\": \"Dog attacks 4-year-old causing injuries (perhaps because the child had been unknowingly tormenting the dog's hidden puppies for weeks)\"\n}",
            "userInputTemplate": "Input: \"{{headlineToAnalyze}}\""
          }
        },
        {
          "id": "euphemism_analyzer",
          "displayName": "1c. Euphemism Analysis & Literal Flip",
          "stateOutputKey": "euphemism_analysis_result",
          "promptConfig": {
            "systemMessage": "You are an expert in Journalism and Media Studies. Your job is to study news headlines (which may contain placeholders like [PERSON_A]) to detect euphemisms, explain their impact, AND rewrite the headline using direct, literal language. Output ONLY valid JSON as specified.",
            "developerInstructionsTemplate": "Instruction:\n1. Carefully parse and analyze keywords, linguistic indicators, agent/patient roles, and contextual elements the input headline: \"{{headlineToAnalyze}}\".\n2. Detect euphemistic, diplomatic terms or phrases, which downplay, white wash or use Colonial Administrative Language in the headline .   \n3. For each identified euphemistic, diplomatic, or Colonial Administrative term analyze what is being downplayed or minimized. Place any additional information added in parentheses. Rewrite the entire headline by replacing all impactful euphemisms with their direct, literal crude meanings. Retain the placeholders in the input headline.          \n4. Your entire output MUST be a single, valid JSON object.\n\nExample 1:\nInput: \"[MILITARY_UNIT] neutralized targets in [AREA_X] during a security operation.\"\nOutput:\n{\n  \"input_headline\": \"[MILITARY_UNIT] neutralized targets in [AREA_X] during a security operation.\",\n  \"analysis\": \"[Write analysis here]\",\n  \"analyzer_alternative_headline_with_placeholders\": \"[MILITARY_UNIT] killed people or destroyed objectives in [AREA_X] during a military offensive.\"\n}",
            "userInputTemplate": "Input: \"{{headlineToAnalyze}}\""
          }
        },
        {
          "id": "episodic_thematic_analyzer",
          "displayName": "1d. episodic_thematic Analysis (Episodic/Thematic)",
          "stateOutputKey": "episodic_thematic_analysis_result",
          "promptConfig": {
            "systemMessage": "You are an expert in media framing analysis. Analyze news snippets to identify whether they use episodic or thematic framing and suggest a reframing that might include placeholders. Output ONLY valid JSON as specified.",
            "developerInstructionsTemplate": "Instruction:\n1. Carefully parse and analyze keywords, linguistic indicators, agent/patient roles, and contextual elements the input headline: \"{{headlineToAnalyze}}\".\n2. Determine if the headline uses thematic or episodic news framing to get a point accross.                                                \n3. If thematic framing is detected, convert it and rewrite the headline using episodic framing. If episodic framing is detected, convert it and rewrite the headline using thematic framing. Place any additional information added in parentheses. Retain the placeholders in the input headline.                                                                                                      \n4. Your entire output MUST be a single, valid JSON object.\n\nExample 1:\nInput: \"In [CITY_A], a 1-year-old boy died from complications of malnutrition.\"\nOutput:\n{\n  \"input_headline\": \"In [CITY_A], a 1-year-old boy died from complications of malnutrition.\",\n  \"analysis\": \"[Write analysis here]\", \n  \"analyzer_alternative_headline_with_placeholders\": \"Widespread malnutrition, exacerbated by drought and aid shortages in places like [CITY_A], continues to claim young lives across the Horn of Africa, highlighting a systemic crisis.\"\n}",
            "userInputTemplate": "Input: \"{{headlineToAnalyze}}\""
          }
        },
        {
          "id": "violence_type_analyzer",
          "displayName": "1e. Violence Type Analysis & Systemic Link",
          "stateOutputKey": "violence_type_analysis_result",
          "promptConfig": {
            "systemMessage": "You are an expert in media news framing. Your job is analyze a headline contains spectacular violence (sudden, dramatic harm such as attacks, riots, murders). If spectacular violence IS found, you will speculate a plausible underlying systemic/structural cause and rewrite the headline appending this cause in parentheses. Output ONLY valid JSON as specified.",
            "developerInstructionsTemplate": "Instruction:\n1. Carefully parse and analyze keywords, linguistic indicators, agent/patient roles, and contextual elements the input headline: \"{{headlineToAnalyze}}\".\n2. Determine if the headlines contains spectacular violence (sudden, dramatic harm such as attacks, riots, murders).                       \n3. If spectacular violence is found, you will speculate a plausible underlying systemic/structural cause and rewrite the headline appending this cause in parentheses. If spectacular violence is not found: Indicate this clearly in the output. Retain the placeholders in the input headline.                                                                                                        \n4. Your entire output MUST be a single, valid JSON object.\n\nExample 1:\nInput: \"Rioters smash downtown storefronts in [CITY_B].\"\nOutput:\n{\n  \"input_headline\": \"Rioters smash downtown storefronts in [CITY_B].\",\n  \"analysis\": \"[Write analysis here]\", \n  \"analyzer_alternative_headline_with_placeholders\": \"Rioters smash downtown storefronts in [CITY_B] (amid rising youth unemployment and a lack of community services).\"\n}",
            "userInputTemplate": "Input: \"{{headlineToAnalyze}}\""
          }
        }
      ]
    },
    {
      "id": "speculative_reverter",
      "displayName": "Revert Speculative Headline",
      "type": "local_function",
      "functionName": "revertGenericAnalyzerHeadline",
      "stateInputArgs": {
        "analyzer_result_object": "speculative_reframing_result",
        "properNoun_map": "properNoun_map"
      },
      "stateOutputKey": "speculative_reverted_headline"
    },
    {
      "id": "episodic_thematic_reverter",
      "displayName": "Revert episodic_thematic Suggestion",
      "type": "local_function",
      "functionName": "revertGenericAnalyzerHeadline",
      "stateInputArgs": {
        "analyzer_result_object": "episodic_thematic_analysis_result",
        "properNoun_map": "properNoun_map"
      },
      "stateOutputKey": "episodic_thematic_reverted_headline"
    },
    {
      "id": "violence_type_reverter",
      "displayName": "Revert Violence Type Headline",
      "type": "local_function",
      "functionName": "revertGenericAnalyzerHeadline",
      "stateInputArgs": {
        "analyzer_result_object": "violence_type_analysis_result",
        "properNoun_map": "properNoun_map"
      },
      "stateOutputKey": "violence_type_reverted_headline"
    },
    {
      "id": "cognitive_frames_reverter",
      "displayName": "Revert Cognitive Type Headline",
      "type": "local_function",
      "functionName": "revertGenericAnalyzerHeadline",
      "stateInputArgs": {
        "analyzer_result_object": "cognitive_frames_analysis_result",
        "properNoun_map": "properNoun_map"
      },
      "stateOutputKey": "cognitive_frames_reverted_headline"
    },
    {
      "id": "euphemism_reverter",
      "displayName": "Revert Euphemism Type Headline",
      "type": "local_function",
      "functionName": "revertGenericAnalyzerHeadline",
      "stateInputArgs": {
        "analyzer_result_object": "euphemism_analysis_result",
        "properNoun_map": "properNoun_map"
      },
      "stateOutputKey": "euphemism_reverted_headline"
    },
    {
      "id": "synthesizer",
      "displayName": "2. Synthesizer (Main Flip)",
      "type": "llm_agent",
      "stateInputArgs": {
        "headlineToSynthesize": "headlineToAnalyze",
        "analysis1": "cognitive_frames_analysis_result",
        "analysis2": "speculative_reframing_result",
        "analysis3": "euphemism_analysis_result",
        "analysis4": "episodic_thematic_analysis_result",
        "analysis5": "violence_type_analysis_result"
      },
      "stateOutputKey": "synthesis_result",
      "derivedStateOutputs": {
        "main_flipped_headline_with_placeholders": {
          "path": "flipped_headline",
          "fallbackValue": "Main alternative perspective unavailable (synthesis error or not found)"
        }
      },
      "promptConfig": {
        "systemMessage": "You are an expert in Journalism and Media Studies specializing in news framing. Your task is to generate a 'flipped_headline' that conveys the SAME CORE FACTS from the original headline but with an opposite (flipped) news framing, based on the provided analyses. Output ONLY valid JSON as specified.",
        "developerInstructionsTemplate": "Instruction:\n1. Study the original headline: \"{{headlineToSynthesize}}\".\n2. Review the provided analyses:\n   - Cognitive News Framing: {{analysis1}}\n   - Speculative News Framing : {{analysis2}}\n   - Euphemistic News Framing: {{analysis3}}\n   - Episodic/Thematic News Framing: {{analysis4}}\n   - Spectacular/Systemic Violence News Framing: {{analysis5}}\n3. Based on these, choose one or more analyses that provide strong evidence of a particular news frame in the original headline.\n4. Generate a \"flipped_headline\" that reverses or significantly alters this news framing while ATTEMPTING TO PRESERVE THE CORE FACTUAL INFORMATION.\n5. The flipped headline should ideally use the same placeholders if they were present in \"{{headlineToSynthesize}}\".\nYour entire output MUST be a single, valid JSON object.\n\nRequired JSON Output Schema:\n{\n  \"input_headline_processed\": \"{{headlineToSynthesize}}\",\n  \"flipped_headline\": \"string (The new headline with flipped framing, may contain placeholders)\",\n  \"reasoning_for_flip\": \"string (Brief explanation of which analysis inspired the flip and how the frame was altered)\",\n  \"analysis_summary_used\": { \n      \"cognitive_frames_had_error\": {{analysis1.error ? true : false}},\n      \"speculative_reframing_had_error\": {{analysis2.error ? true : false}},\n      \"euphemism_analysis_had_error\": {{analysis3.error ? true : false}},\n      \"episodic_thematic_analysis_had_error\": {{analysis4.error ? true : false}},\n      \"violence_type_analysis_had_error\": {{analysis5.error ? true : false}}\n  }\n}\nExample:\nInput Headline: \"[LEADER_X] announces decisive action against protest.\"\nCognitive Frame Analysis might indicate \"Control/Order\" frame.\nFlipped Headline might be: \"Community members express concerns as [LEADER_X] escalates measures against public assembly.\"\n\nOutput:\n{\n  \"input_headline_processed\": \"[LEADER_X] announces decisive action against protest.\",\n  \"flipped_headline\": \"Community members express concerns as [LEADER_X] escalates measures against public assembly.\",\n  \"reasoning_for_flip\": \"Flipped from a 'Control/Order' frame implied by 'decisive action' to a 'Concern/Rights' frame by focusing on community perspective and 'escalates measures'.\",\n  \"analysis_summary_used\": { \"cognitive_frames_had_error\": false, \"speculative_reframing_had_error\": false, \"euphemism_analysis_had_error\": false, \"episodic_thematic_analysis_had_error\": false, \"violence_type_analysis_had_error\": false }\n}",
        "userInputTemplate": "Synthesize a flipped headline for: \"{{headlineToSynthesize}}\" using the provided analyses."
      }
    },
    {
      "id": "main_headline_reverter",
      "displayName": "3. Revert Main Flipped Headline",
      "type": "local_function",
      "functionName": "revertProperNouns",
      "stateInputArgs": {
        "text_with_placeholders": "main_flipped_headline_with_placeholders",
        "properNoun_map": "properNoun_map"
      }
    },
    {
      "id": "data_collector_for_saver",
      "displayName": "Collect Data for Saver",
      "type": "local_function",
      "functionName": "collectAndVerifyDataForSaver",
      "stateInputArgs": {
        "input_headline": "input_headline",
        "main_flipped_headline_from_state": "flipped_headline",
        "speculative_reverted_headline": "speculative_reverted_headline",
        "episodic_thematic_reverted_headline": "episodic_thematic_reverted_headline",
        "violence_type_reverted_headline": "violence_type_reverted_headline",
        "cognitive_frames_reverted_headline": "cognitive_frames_reverted_headline",
        "euphemism_reverted_headline": "euphemism_reverted_headline"
      },
      "stateOutputKey": "data_package_for_saver"
    },
    {
      "id": "saver",
      "displayName": "4. Save All to DB",
      "type": "local_function",
      "functionName": "saveAllToDynamoDB",
      "stateInputArgs": {
        "packaged_data": "data_package_for_saver"
      },
      "stateOutputKey": "db_save_status"
    }
  ],
  "graphEdges": [
    {
      "source": "properNoun_replacer1",
      "target": "parallel_analyzers_coordinator"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "cognitive_frames_reverter"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "euphemism_reverter"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "speculative_reverter"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "episodic_thematic_reverter"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "violence_type_reverter"
    },
    {
      "source": "parallel_analyzers_coordinator",
      "target": "synthesizer"
    },
    {
      "source": "synthesizer",
      "target": "main_headline_reverter"
    },
    {
      "source": "main_headline_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "cognitive_frames_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "euphemism_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "speculative_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "episodic_thematic_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "violence_type_reverter",
      "target": "data_collector_for_saver"
    },
    {
      "source": "data_collector_for_saver",
      "target": "saver"
    },
    {
      "source": "saver",
      "target": "END"
    }
  ]
}